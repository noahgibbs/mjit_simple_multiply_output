multiply_2_obj.o:
(__TEXT,__text) section
__mjit0:
0000000000000000	pushq	%rbp
0000000000000001	movq	%rsp, %rbp
0000000000000004	pushq	%r15
0000000000000006	pushq	%r14
0000000000000008	pushq	%r13
000000000000000a	pushq	%r12
000000000000000c	pushq	%rbx
000000000000000d	subq	$0x28, %rsp
0000000000000011	movq	%rsi, %r14
0000000000000014	movabsq	$0x7ff4cd506ff8, %r15
000000000000001e	movq	0x18(%rsi), %rbx
0000000000000022	movq	_ruby_vm_global_method_state(%rip), %rax
0000000000000029	cmpq	$0x8f, __mjit0(%rax)
0000000000000030	jne	0x27e
0000000000000036	movq	%rdi, %r8
0000000000000039	testb	$0x7, %bl
000000000000003c	je	0x6e
000000000000003e	testb	$0x1, %bl
0000000000000041	jne	0x95
0000000000000043	movl	%ebx, %eax
0000000000000045	andl	$0x3, %eax
0000000000000048	cmpl	$0x2, %eax
000000000000004b	jne	0x258
0000000000000051	movq	_rb_cFloat(%rip), %rax
0000000000000058	movq	__mjit0(%rax), %rax
000000000000005b	movq	0x18(%rax), %rax
000000000000005f	cmpq	$0x1128, 0x38(%rax)
0000000000000067	je	0xb1
0000000000000069	jmp	0x27e
000000000000006e	testq	$-0x9, %rbx
0000000000000075	je	0x368
000000000000007b	leaq	0x8(%rbx), %rax
000000000000007f	movq	__mjit0(%rax), %rax
0000000000000082	movq	0x18(%rax), %rax
0000000000000086	cmpq	$0x1128, 0x38(%rax)
000000000000008e	je	0xb1
0000000000000090	jmp	0x27e
0000000000000095	movq	_rb_cInteger(%rip), %rax
000000000000009c	movq	__mjit0(%rax), %rax
000000000000009f	movq	0x18(%rax), %rax
00000000000000a3	cmpq	$0x1128, 0x38(%rax)
00000000000000ab	jne	0x27e
00000000000000b1	movq	%r15, __mjit0(%r14)
00000000000000b4	movq	0x30(%r14), %r13
00000000000000b8	leaq	0x18(%r13), %r12
00000000000000bc	movq	%r12, 0x8(%r14)
00000000000000c0	movq	%rbx, (%r13)
00000000000000c4	movdqa	0x614(%rip), %xmm0
00000000000000cc	movdqu	%xmm0, 0x8(%r13)
00000000000000d2	movq	0x18(%r14), %rax
00000000000000d6	movq	%rax, -0x48(%rbp)
00000000000000da	movq	0x20(%r14), %rax
00000000000000de	movq	%rbx, 0x18(%r14)
00000000000000e2	movq	-0x20(%rax), %rdi
00000000000000e6	movq	-0x18(%rax), %rbx
00000000000000ea	movl	%edi, %eax
00000000000000ec	andl	%ebx, %eax
00000000000000ee	testb	$0x1, %al
00000000000000f0	je	0x144
00000000000000f2	movq	_ruby_current_vm_ptr(%rip), %rax
00000000000000f9	movq	__mjit0(%rax), %rax
00000000000000fc	testb	$0x1, 0x424(%rax)
0000000000000103	jne	0x144
0000000000000105	movq	%rdi, %rcx
0000000000000108	sarq	%rcx
000000000000010b	movq	%rbx, %rax
000000000000010e	sarq	%rax
0000000000000111	imulq	%rcx
0000000000000114	movabsq	$0x4000000000000000, %rcx
000000000000011e	addq	%rax, %rcx
0000000000000121	movq	%rdx, %rsi
0000000000000124	adcq	$0x0, %rsi
0000000000000128	shrdq	$0x3f, %rsi, %rcx
000000000000012d	shrq	$0x3f, %rsi
0000000000000131	orq	%rcx, %rsi
0000000000000134	jne	0x229
000000000000013a	leaq	0x1(%rax,%rax), %r12
000000000000013f	jmp	0x513
0000000000000144	movl	%edi, %eax
0000000000000146	xorl	$0x2, %eax
0000000000000149	movl	%ebx, %ecx
000000000000014b	xorl	$0x2, %ecx
000000000000014e	orl	%eax, %ecx
0000000000000150	testb	$0x3, %cl
0000000000000153	movq	%rdi, -0x40(%rbp)
0000000000000157	movq	%rbx, -0x30(%rbp)
000000000000015b	je	0x2cf
0000000000000161	leaq	0x10(%r13), %rax
0000000000000165	testq	$-0x9, %rbx
000000000000016c	je	0x43a
0000000000000172	movq	%rdi, %rcx
0000000000000175	andq	$-0x9, %rcx
0000000000000179	je	0x43a
000000000000017f	movl	%ebx, %ecx
0000000000000181	orl	%edi, %ecx
0000000000000183	andl	$0x7, %ecx
0000000000000186	testq	%rcx, %rcx
0000000000000189	jne	0x43a
000000000000018f	movq	0x8(%rdi), %rcx
0000000000000193	movq	_rb_cFloat(%rip), %rdx
000000000000019a	cmpq	__mjit0(%rdx), %rcx
000000000000019d	jne	0x43a
00000000000001a3	cmpq	%rcx, 0x8(%rbx)
00000000000001a7	jne	0x43a
00000000000001ad	movq	_ruby_current_vm_ptr(%rip), %rcx
00000000000001b4	movq	__mjit0(%rcx), %rcx
00000000000001b7	testb	$0x2, 0x424(%rcx)
00000000000001be	jne	0x43a
00000000000001c4	movq	%r12, -0x38(%rbp)
00000000000001c8	movabsq	$-0x7ffffffffffffffe, %r12
00000000000001d2	movq	-0x40(%rbp), %rdx
00000000000001d6	movl	%edx, %eax
00000000000001d8	andl	$0x3, %eax
00000000000001db	cmpq	$0x2, %rax
00000000000001df	jne	0x583
00000000000001e5	pxor	%xmm0, %xmm0
00000000000001e9	cmpq	%r12, %rdx
00000000000001ec	movq	-0x30(%rbp), %rsi
00000000000001f0	je	0x58c
00000000000001f6	movq	%rdx, %rax
00000000000001f9	shrq	$0x3f, %rax
00000000000001fd	movl	$0x2, %ecx
0000000000000202	subl	%eax, %ecx
0000000000000204	movl	%edx, %eax
0000000000000206	andl	$0x4, %eax
0000000000000209	orl	%ecx, %eax
000000000000020b	shldq	$0x3d, %rdx, %rax
0000000000000210	movq	%rax, %xmm0
0000000000000215	movl	%esi, %eax
0000000000000217	andl	$0x3, %eax
000000000000021a	cmpq	$0x2, %rax
000000000000021e	je	0x597
0000000000000224	jmp	0x5c8
0000000000000229	movq	%r12, -0x38(%rbp)
000000000000022d	movq	%rbx, -0x30(%rbp)
0000000000000231	movq	%rdi, -0x40(%rbp)
0000000000000235	movq	%r8, %rbx
0000000000000238	movq	%rax, %rdi
000000000000023b	movq	%rdx, %rsi
000000000000023e	callq	_rb_int128t2big
0000000000000243	movq	%rax, %r12
0000000000000246	cmpq	$0x34, %rax
000000000000024a	movq	%rbx, %r8
000000000000024d	je	0x42e
0000000000000253	jmp	0x513
0000000000000258	cmpq	$0x14, %rbx
000000000000025c	jne	0x39c
0000000000000262	movq	_rb_cTrueClass(%rip), %rax
0000000000000269	movq	__mjit0(%rax), %rax
000000000000026c	movq	0x18(%rax), %rax
0000000000000270	cmpq	$0x1128, 0x38(%rax)
0000000000000278	je	0xb1
000000000000027e	leaq	-0x18(%r15), %rax
0000000000000282	movq	%rax, __mjit0(%r14)
0000000000000285	movq	0x30(%r14), %rax
0000000000000289	addq	$0x18, %rax
000000000000028d	movq	%rax, 0x8(%r14)
0000000000000291	movq	0x429ba0(%r15), %rdi
0000000000000298	callq	_rb_mjit_iseq_compile_info
000000000000029d	movb	$0x1, 0x1(%rax)
00000000000002a1	addq	$0x429b90, %r15
00000000000002a8	movq	%r15, %rdi
00000000000002ab	callq	_rb_mjit_recompile_iseq
00000000000002b0	movq	0x30(%r14), %rax
00000000000002b4	movq	%rbx, __mjit0(%rax)
00000000000002b7	movdqa	0x421(%rip), %xmm0
00000000000002bf	movdqu	%xmm0, 0x8(%rax)
00000000000002c4	movl	$0x34, %r12d
00000000000002ca	jmp	0x542
00000000000002cf	movq	_ruby_current_vm_ptr(%rip), %rax
00000000000002d6	movq	__mjit0(%rax), %rax
00000000000002d9	testb	$0x2, 0x424(%rax)
00000000000002e0	jne	0x161
00000000000002e6	movq	%r12, -0x38(%rbp)
00000000000002ea	movabsq	$-0x7ffffffffffffffe, %r12
00000000000002f4	movl	%edi, %eax
00000000000002f6	andl	$0x3, %eax
00000000000002f9	cmpq	$0x2, %rax
00000000000002fd	jne	0x3c6
0000000000000303	pxor	%xmm0, %xmm0
0000000000000307	cmpq	%r12, %rdi
000000000000030a	je	0x32b
000000000000030c	movq	%rdi, %rax
000000000000030f	shrq	$0x3f, %rax
0000000000000313	movl	$0x2, %ecx
0000000000000318	subl	%eax, %ecx
000000000000031a	movl	%edi, %eax
000000000000031c	andl	$0x4, %eax
000000000000031f	orl	%ecx, %eax
0000000000000321	shldq	$0x3d, %rdi, %rax
0000000000000326	movq	%rax, %xmm0
000000000000032b	movl	%ebx, %eax
000000000000032d	andl	$0x3, %eax
0000000000000330	cmpq	$0x2, %rax
0000000000000334	jne	0x3da
000000000000033a	pxor	%xmm1, %xmm1
000000000000033e	cmpq	%r12, %rbx
0000000000000341	je	0x3df
0000000000000347	movq	%rbx, %rax
000000000000034a	shrq	$0x3f, %rax
000000000000034e	movl	$0x2, %ecx
0000000000000353	subl	%eax, %ecx
0000000000000355	movl	%ebx, %eax
0000000000000357	andl	$0x4, %eax
000000000000035a	orl	%ecx, %eax
000000000000035c	shldq	$0x3d, %rbx, %rax
0000000000000361	movq	%rax, %xmm1
0000000000000366	jmp	0x3df
0000000000000368	cmpq	$0x8, %rbx
000000000000036c	je	0x554
0000000000000372	testq	%rbx, %rbx
0000000000000375	jne	0x7b
000000000000037b	movq	_rb_cFalseClass(%rip), %rax
0000000000000382	movq	__mjit0(%rax), %rax
0000000000000385	movq	0x18(%rax), %rax
0000000000000389	cmpq	$0x1128, 0x38(%rax)
0000000000000391	je	0xb1
0000000000000397	jmp	0x27e
000000000000039c	cmpb	$0xc, %bl
000000000000039f	jne	0x7b
00000000000003a5	movq	_rb_cSymbol(%rip), %rax
00000000000003ac	movq	__mjit0(%rax), %rax
00000000000003af	movq	0x18(%rax), %rax
00000000000003b3	cmpq	$0x1128, 0x38(%rax)
00000000000003bb	je	0xb1
00000000000003c1	jmp	0x27e
00000000000003c6	movq	0x10(%rdi), %xmm0
00000000000003cb	movl	%ebx, %eax
00000000000003cd	andl	$0x3, %eax
00000000000003d0	cmpq	$0x2, %rax
00000000000003d4	je	0x33a
00000000000003da	movq	0x10(%rbx), %xmm1
00000000000003df	mulsd	%xmm1, %xmm0
00000000000003e3	movq	%xmm0, %rax
00000000000003e8	movabsq	$0x3000000000000000, %rcx
00000000000003f2	cmpq	%rcx, %rax
00000000000003f5	je	0x416
00000000000003f7	movq	%rax, %rcx
00000000000003fa	shrq	$0x3c, %rcx
00000000000003fe	andl	$0x7, %ecx
0000000000000401	addl	$-0x3, %ecx
0000000000000404	cmpl	$0x1, %ecx
0000000000000407	jbe	0x575
000000000000040d	testq	%rax, %rax
0000000000000410	je	0x513
0000000000000416	movq	%r8, %rbx
0000000000000419	callq	_rb_float_new_in_heap
000000000000041e	movq	%rax, %r12
0000000000000421	cmpq	$0x34, %rax
0000000000000425	movq	%rbx, %r8
0000000000000428	jne	0x513
000000000000042e	movq	0x30(%r14), %rax
0000000000000432	addq	$0x10, %rax
0000000000000436	movq	-0x38(%rbp), %r12
000000000000043a	movq	%rax, 0x8(%r14)
000000000000043e	leaq	0x130a8(%r15), %rax
0000000000000445	movq	%rax, __mjit0(%r14)
0000000000000448	movq	0x429ba0(%r15), %rdi
000000000000044f	movq	%r8, %rbx
0000000000000452	callq	_rb_mjit_iseq_compile_info
0000000000000457	movb	$0x1, 0x2(%rax)
000000000000045b	leaq	0x429b90(%r15), %rdi
0000000000000462	callq	_rb_mjit_recompile_iseq
0000000000000467	movupd	__mjit0(%r14), %xmm0
000000000000046c	movq	%r15, __mjit0(%r14)
000000000000046f	movq	%r12, 0x8(%r14)
0000000000000473	movq	0x18(%r14), %r8
0000000000000477	movq	-0x48(%rbp), %rax
000000000000047b	movq	%rax, 0x18(%r14)
000000000000047f	movq	0x429970(%r15), %rax
0000000000000486	movq	0x8(%rax), %rdx
000000000000048a	movq	%r13, 0x8(%r14)
000000000000048e	movq	0x10(%rdx), %rax
0000000000000492	movslq	0x100(%rax), %rcx
0000000000000499	movq	0x10(%rbx), %rax
000000000000049d	leaq	-0x38(%rax), %rsi
00000000000004a1	leaq	0x38(%r12,%rcx,8), %rcx
00000000000004a6	cmpq	%rcx, %rsi
00000000000004a9	jbe	0x5e8
00000000000004af	movq	%rbx, %rdi
00000000000004b2	movq	%rsi, 0x10(%rbx)
00000000000004b6	movq	%rdx, -0x28(%rax)
00000000000004ba	movq	%r8, -0x20(%rax)
00000000000004be	movq	$__mjit0, -0x10(%rax)
00000000000004c6	leaq	0x28(%r13), %rcx
00000000000004ca	movabsq	$0x7ff4cd930958, %rdx
00000000000004d4	movq	%rdx, %xmm1
00000000000004d9	movdqu	%xmm1, 0x18(%r13)
00000000000004df	movq	$0x11110003, 0x28(%r13)
00000000000004e7	movq	%rcx, -0x18(%rax)
00000000000004eb	leaq	0x30(%r13), %rcx
00000000000004ef	movq	%rcx, -0x8(%rax)
00000000000004f3	movupd	%xmm0, -0x38(%rax)
00000000000004f8	movq	-0x40(%rbp), %rax
00000000000004fc	movq	%rax, 0x30(%r13)
0000000000000500	movq	-0x30(%rbp), %rax
0000000000000504	movq	%rax, 0x38(%r13)
0000000000000508	callq	_rb_vm_exec
000000000000050d	movq	%rbx, %r8
0000000000000510	movq	%rax, %r12
0000000000000513	movq	-0x48(%rbp), %rax
0000000000000517	movq	%rax, 0x18(%r14)
000000000000051b	addq	$0x10, %r15
000000000000051f	movq	%r15, __mjit0(%r14)
0000000000000522	movq	0x30(%r14), %rax
0000000000000526	movq	%rax, 0x8(%r14)
000000000000052a	movl	0x2c(%r8), %eax
000000000000052e	notl	%eax
0000000000000530	testl	%eax, 0x28(%r8)
0000000000000534	jne	0x5d2
000000000000053a	addq	$0x38, %r14
000000000000053e	movq	%r14, 0x10(%r8)
0000000000000542	movq	%r12, %rax
0000000000000545	addq	$0x28, %rsp
0000000000000549	popq	%rbx
000000000000054a	popq	%r12
000000000000054c	popq	%r13
000000000000054e	popq	%r14
0000000000000550	popq	%r15
0000000000000552	popq	%rbp
0000000000000553	retq
0000000000000554	movq	_rb_cNilClass(%rip), %rax
000000000000055b	movq	__mjit0(%rax), %rax
000000000000055e	movq	0x18(%rax), %rax
0000000000000562	cmpq	$0x1128, 0x38(%rax)
000000000000056a	je	0xb1
0000000000000570	jmp	0x27e
0000000000000575	rolq	$0x3, %rax
0000000000000579	andq	$-0x4, %rax
000000000000057d	orq	$0x2, %rax
0000000000000581	jmp	0x510
0000000000000583	movq	0x10(%rdx), %xmm0
0000000000000588	movq	-0x30(%rbp), %rsi
000000000000058c	movl	%esi, %eax
000000000000058e	andl	$0x3, %eax
0000000000000591	cmpq	$0x2, %rax
0000000000000595	jne	0x5c8
0000000000000597	pxor	%xmm1, %xmm1
000000000000059b	cmpq	%r12, %rsi
000000000000059e	je	0x3df
00000000000005a4	movq	%rsi, %rax
00000000000005a7	shrq	$0x3f, %rax
00000000000005ab	movl	$0x2, %ecx
00000000000005b0	subl	%eax, %ecx
00000000000005b2	movl	%esi, %eax
00000000000005b4	andl	$0x4, %eax
00000000000005b7	orl	%ecx, %eax
00000000000005b9	shldq	$0x3d, %rsi, %rax
00000000000005be	movq	%rax, %xmm1
00000000000005c3	jmp	0x3df
00000000000005c8	movq	0x10(%rsi), %xmm1
00000000000005cd	jmp	0x3df
00000000000005d2	movq	0x38(%r8), %rdi
00000000000005d6	xorl	%esi, %esi
00000000000005d8	movq	%r8, %rbx
00000000000005db	callq	_rb_threadptr_execute_interrupts
00000000000005e0	movq	%rbx, %r8
00000000000005e3	jmp	0x53a
00000000000005e8	callq	_vm_stackoverflow
00000000000005ed	nopl	__mjit0(%rax)
_vm_stackoverflow:
00000000000005f0	pushq	%rbp
00000000000005f1	movq	%rsp, %rbp
00000000000005f4	movq	_ruby_current_execution_context_ptr(%rip), %rax
00000000000005fb	movq	__mjit0(%rax), %rdi
00000000000005fe	callq	_ec_stack_overflow
0000000000000603	nopw	%cs:__mjit0(%rax,%rax)
000000000000060d	nopl	__mjit0(%rax)
_ec_stack_overflow:
0000000000000610	pushq	%rbp
0000000000000611	movq	%rsp, %rbp
0000000000000614	pushq	%r15
0000000000000616	pushq	%r14
0000000000000618	pushq	%rbx
0000000000000619	pushq	%rax
000000000000061a	movq	%rdi, %rbx
000000000000061d	movq	0x38(%rdi), %rax
0000000000000621	movq	0x18(%rax), %rax
0000000000000625	movq	0x1a8(%rax), %r14
000000000000062c	movb	$0x2, 0x88(%rdi)
0000000000000633	callq	_rb_ec_backtrace_object
0000000000000638	movq	%rax, %r15
000000000000063b	movq	%r14, %rdi
000000000000063e	callq	_ruby_vm_special_exception_copy
0000000000000643	movq	%rax, %r14
0000000000000646	movl	$0xd21, %esi
000000000000064b	movq	%rax, %rdi
000000000000064e	movq	%r15, %rdx
0000000000000651	callq	_rb_ivar_set
0000000000000656	movl	$0xd31, %esi
000000000000065b	movq	%r14, %rdi
000000000000065e	movq	%r15, %rdx
0000000000000661	callq	_rb_ivar_set
0000000000000666	movq	%r14, 0x78(%rbx)
000000000000066a	movq	0x18(%rbx), %rdi
000000000000066e	callq	_rb_ec_tag_jump
0000000000000673	nopw	%cs:__mjit0(%rax,%rax)
000000000000067d	nopl	__mjit0(%rax)
_ruby_vm_special_exception_copy:
0000000000000680	pushq	%rbp
0000000000000681	movq	%rsp, %rbp
0000000000000684	pushq	%r14
0000000000000686	pushq	%rbx
0000000000000687	movq	%rdi, %r14
000000000000068a	movq	0x8(%rdi), %rdi
000000000000068e	callq	_rb_class_real
0000000000000693	movq	%rax, %rdi
0000000000000696	callq	_rb_obj_alloc
000000000000069b	movq	%rax, %rbx
000000000000069e	movq	%rax, %rdi
00000000000006a1	movq	%r14, %rsi
00000000000006a4	callq	_rb_obj_copy_ivar
00000000000006a9	movq	%rbx, %rax
00000000000006ac	popq	%rbx
00000000000006ad	popq	%r14
00000000000006af	popq	%rbp
00000000000006b0	retq
00000000000006b1	nopw	%cs:__mjit0(%rax,%rax)
00000000000006bb	nopl	(%rax,%rax)
_rb_ec_tag_jump:
00000000000006c0	pushq	%rbp
00000000000006c1	movq	%rsp, %rbp
00000000000006c4	movl	$0x6, 0xb0(%rdi)
00000000000006ce	addq	$0x10, %rdi
00000000000006d2	movl	$0x1, %esi
00000000000006d7	callq	_siglongjmp
